import requests
import json
import pickle

# Load the cache set from a file or create an empty set if the file doesn't exist
def load_cache(file_name):
    try:
        with open(file_name, 'rb') as f:
            return pickle.load(f)
    except FileNotFoundError:
        return set()

# Save the cache set to a file
def save_cache(file_name, cache):
    with open(file_name, 'wb') as f:
        pickle.dump(cache, f)

# Load the processed_ids set from a file
processed_ids = load_cache('processed_ids.pkl')

def main():
    # Replace with your own vulnerability database APIs
    NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/1.0"
    OSV_API_URL = "https://api.osv.dev/v1/query"

    nvd_response = get_response(NVD_API_URL)
    osv_response = get_response(OSV_API_URL, osv=True)

    parse_data(nvd_response, "NVD")
    parse_data(osv_response, "OSV")

    # Save the processed_ids set to a file before exiting
    save_cache('processed_ids.pkl', processed_ids)

def get_response(API_URL, osv=False):
    try:
        if osv:
            headers = {'Content-Type': 'application/json'}
            data = json.dumps({"commit": "6879efc2c1596d11a6a6ad296f80063b558d5e0f"})
            response = requests.post(API_URL, headers=headers, data=data)
        else:
            response = requests.get(API_URL)
        response.raise_for_status()
    except requests.exceptions.HTTPError as errh:
        print("HTTP Error:", errh)
    except requests.exceptions.ConnectionError as errc:
        print("Error Connecting:", errc)
    except requests.exceptions.Timeout as errt:
        print("Timeout Error:", errt)
    except requests.exceptions.RequestException as err:
        print("Something went wrong", err)
    return response.json()

def parse_data(response, source):
    global processed_ids
    print(f"Source: {source}")
    if source == "NVD":
        items = response['result']['CVE_Items']
    else:  # OSV
        items = response['vulns']

    for item in items:
        if source == "NVD":
            id = item['cve']['CVE_data_meta']['ID']
        else:  # OSV
            id = item['id']

        # Skip processing if the vulnerability ID is already in the cache
        if id in processed_ids:
            continue

        # Add the vulnerability ID to the cache
        processed_ids.add(id)

        if source == "NVD":
            print(f"Title: {item['cve']['CVE_data_meta']['ID']}")
            print(f"Description: {item['cve']['description']['description_data'][0]['value']}")
            print(f"Published date: {item['publishedDate']}")
            print(f"Update date: {item['lastModifiedDate']}")

            try:
                print(f"CVSS Score: {item['impact']['baseMetricV3']['cvssV3']['baseScore']}")
                print(f"CVSS Vector: {item['impact']['baseMetricV3']['cvssV3']['vectorString']}")
            except KeyError:
                print("CVSS Score: Not available")
                print("CVSS Vector: Not available")
        else:  # OSV
            print(f"Title: {item['id']}")
            print(f"Description: {item['details']}")
            print(f"Published date: {item['published']}")
            print(f"Update date: {item['modified']}")

            try:
                print(f"CVSS Score: {item['cvss']['score']}")
                print(f"CVSS Vector: {item['cvss']['vector']}")
            except KeyError:
                print("CVSS Score: Not available")
                print("CVSS Vector: Not available")

        print("\n")

if __name__ == "__main__":
    main()
